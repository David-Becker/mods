piece base, body, flier0, flier1, wing, thruster0, thruster1;
piece builder, nano0, nano1;
piece laserarms, lasergun0, laser0, lasergun1, laser1;
piece missile0, missile1, missile2, missilelauncher0, missilelauncher1, missilelauncher2;
piece snipergun, sniper;
//piece shield0, shield1, shield2, shield3, shield4, shield5, shield6, shield7, shield8, shield9;

static-var nanospray, missile, waittime, shieldlevel, mainheading;

#define AimingSpeed <380>

#define SIG_Aim0 1
#define SIG_Aim1 2
#define SIG_Aim2 4
#define SIG_Build 8
#define SIG_Deactivate 16;

#include "exptype.h"

#define UPGRADE_LOOP 0
#include "upgradesystem.h"

#define MELTER_DEPTH [-16]
#include "buildFX_melter.h"

#define BUILDER
//#define LASER
//#define MISSILES
//#define SNIPER

Create()
{
	start-script buildFX();
	
	//not a laser drone?
	#ifndef LASER
	hide laserarms;
	hide lasergun0;
	hide lasergun1;
	#endif
	
	//not a builder drone?
	#ifndef BUILDER
	hide builder;
	#endif
	
	//not a missile drone?
	#ifndef MISSILES
	hide missile0;
	hide missile1;
	hide missile2;
	#endif
	
	//not a sniper drone?
	#ifndef SNIPER
	hide snipergun;
	#endif
	
	start-script CheckForUpgrades();

/*	hide shield0;
	hide shield1;
	hide shield2;
	hide shield3;
	hide shield4;
	hide shield5;
	hide shield6;
	hide shield7;
	hide shield8;
	hide shield9;
	shieldlevel=0;*/
	#ifdef LASER
	//start-script ChargeShield();
	#endif
	
	#ifdef SUPERDRONE
	show laserarms;
	show lasergun0;
	show lasergun1;

	show missile0;
	show missile1;
	show missile2;
	
	show snipergun;
	#endif
	
	#ifdef MISSILES
	sleep 100;
	if (upgrades != (upgrades | 64)) hide missile2;
	#endif
}

SweetSpot(piecenum)
{
	piecenum=body;
}

Killed(severity, corpsetype)
{
	explode thruster0 type FALL | FIRE;
//	explode thruster1 type FALL;
//	explode flier0 type FALL | FIRE;
	explode flier1 type FALL;
//	explode wing type FALL | FIRE | SMOKE;

	#ifdef LASER
	//laser
	explode lasergun0 type FALL;
//	explode lasergun1 type FALL | FIRE | SMOKE;
//	explode laserarms type FALL | SMOKE;
	#endif

	#ifdef BUILDER
	//builder
	explode builder type FALL;
	#endif

	#ifdef MISSILES
	//missile
//	explode missile0 type FALL | FIRE | SMOKE;
	explode missile1 type FALL;
//	explode missile2 type FALL | FIRE | SMOKE;
	#endif

	#ifdef SNIPER
	//sniper
	explode snipergun type SHATTER;
	#endif
	
	corpsetype=1;
	
	if (severity > 50)
	{
		corpsetype=3;
		explode body type SHATTER;
	}
}


// begin laser drone specific stuff

#ifdef LASER

/*ChargeShield()
{
	signal SIG_Deactivate;
	set-signal-mask SIG_Deactivate;
	while(shieldlevel < 10)
	{
		sleep <2000>;
		shieldlevel=shieldlevel + 1;
		if (shieldlevel>=1) show shield0;
		if (shieldlevel>=2) show shield1;
		if (shieldlevel>=3) show shield2;
		if (shieldlevel>=4) show shield3;
		if (shieldlevel>=5) show shield4;
		if (shieldlevel>=6) show shield5;
		if (shieldlevel>=7) show shield6;
		if (shieldlevel>=8) show shield7;
		if (shieldlevel>=9) show shield8;
		if (shieldlevel>=10) show shield9;
		set ARMORED to 1;
	}
//	set ACTIVATION to 0;
}

Activate()
{
	start-script ChargeShield();
	return(TRUE);
}

Deactivate()
{
	signal SIG_Deactivate;
	return(TRUE);
}

HitByWeapon(anglex,anglez)
{
	shieldlevel=shieldlevel - 1;
	if (shieldlevel<=0) set ARMORED to 0;
	
	if (shieldlevel<=0) hide shield0;
	if (shieldlevel<=1) hide shield1;
	if (shieldlevel<=2) hide shield2;
	if (shieldlevel<=3) hide shield3;
	if (shieldlevel<=4) hide shield4;
	if (shieldlevel<=5) hide shield5;
	if (shieldlevel<=6) hide shield6;
	if (shieldlevel<=7) hide shield7;
	if (shieldlevel<=8) hide shield8;
	if (shieldlevel<=9) hide shield9;
	signal SIG_Deactivate;
	start-script ChargeShield();
}*/

AimFromPrimary(piecenum)
{
	piecenum=lasergun0;
}

QueryPrimary(piecenum)
{
	piecenum=laser0;
}

IdleGuns() {
	sleep 3000;
	turn lasergun0 to y-axis 0 speed AimingSpeed;
	turn lasergun0 to x-axis 0 speed AimingSpeed;
	turn lasergun1 to y-axis 0 speed AimingSpeed;
	turn lasergun1 to x-axis 0 speed AimingSpeed;
}

AimPrimary(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	turn lasergun0 to y-axis heading speed AimingSpeed;
	turn lasergun0 to x-axis (0-pitch) speed AimingSpeed;
	start-script IdleGuns();
	return TRUE;
}

AimFromSecondary(piecenum)
{
	piecenum=lasergun1;
}

QuerySecondary(piecenum)
{
	piecenum=laser1;
	
}

AimSecondary(heading, pitch)
{
	signal SIG_Aim1;
	set-signal-mask SIG_Aim1;
	turn lasergun1 to y-axis heading speed AimingSpeed;
	turn lasergun1 to x-axis (0-pitch) speed AimingSpeed;
	start-script IdleGuns();
	return TRUE;
}
#endif
// end laser drone specific stuff

//begin builder drone specifics

#ifdef BUILDER

StartBuilding(heading, pitch)
{
	signal SIG_Build;
	set-signal-mask SIG_Build;
	turn base to y-axis heading speed AimingSpeed;
	wait-for-turn base around y-axis;
	set INBUILDSTANCE to TRUE;
}

StopBuilding()
{
	turn base to y-axis <0> speed AimingSpeed;
	set INBUILDSTANCE to FALSE;
}

QueryNanoPiece(piecenum)
{
	if (nanospray==0)
	{
		emit-sfx 1025 from nano0;
		piecenum=nano0;
		nanospray=1;
	}
	else if (nanospray==1)
	{
		emit-sfx 1025 from nano1;
		piecenum=nano1;
		nanospray=0;
	}
}

AimPrimary(heading, pitch)
{
	return(TRUE);
}

AimFromPrimary(piecenum)
{
	piecenum=body;
}

QueryPrimary(piecenum)
{
	piecenum=body;
}

#endif

//end builder drone

//begin missile drone

#ifdef MISSILES

AimFromPrimary(piecenum)
{
	piecenum=missilelauncher0;
}

QueryPrimary(piecenum)
{
	if (missile==0)
		piecenum=missilelauncher0;
	else if (missile==1)
		piecenum=missilelauncher1;
}

FirePrimary()
{
	missile=missile+1;
	if (missile>1) missile=0;
}

IdleGuns()
{
	sleep 3000;
	turn body to y-axis 0 speed AimingSpeed;
	turn missile2 to y-axis 0 speed <180>;
	turn missile2 to x-axis 0 speed <180>;
}

AimPrimary(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	mainheading = heading;
	turn body to y-axis heading speed AimingSpeed;
	//turn missile0 to x-axis pitch speed AimingSpeed;
	//turn missile1 to x-axis pitch speed AimingSpeed;
	start-script IdleGuns();
	return TRUE;
}

AimSecondary(heading, pitch)
{
	if (upgrades != (upgrades | 64)) return 0; //don't use this if the Artillery Missiles upgrade hasn't been researched yet
	signal SIG_Aim1;
	set-signal-mask SIG_Aim1;
	turn missile2 to y-axis (heading - mainheading) speed <180>;
	turn missile2 to x-axis (0-pitch) speed <180>;
	wait-for-turn missile2 around x-axis;
	wait-for-turn missile2 around y-axis;
	start-script IdleGuns();
	return TRUE;
}

AimFromSecondary(piecenum)
{
	piecenum=missilelauncher2;
}

QuerySecondary(piecenum)
{
	piecenum=missilelauncher2;
}

/*FireSecondary()
{
	for (t=0; t<3; t=t+1)
		explode missilelauncher2 type FIRE | SMOKE | BITMAP2;
}*/

#endif
//sniper drone
#ifdef SNIPER
AimFromPrimary(piecenum)
{
	piecenum=body;
}

QueryPrimary(piecenum)
{
	piecenum=sniper;
}

/*FirePrimary()
{
	for (missile=0; missile<10; missile=missile+1)
		explode sniper type FIRE | SMOKE;
}*/

IdleGuns() 
{
	sleep 3000;
	turn body to y-axis 0 speed AimingSpeed;
	turn snipergun to x-axis 0 speed AimingSpeed;
}

AimPrimary(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	turn body to y-axis heading speed AimingSpeed;
	turn snipergun to x-axis (0-pitch) speed AimingSpeed;
	start-script IdleGuns();
	return TRUE;
}

AimSecondary(heading, pitch)
{
	return(!(get BUILD_PERCENT_LEFT));
}

AimFromSecondary(piecenum)
{
	piecenum=body;
}

QuerySecondary(piecenum)
{
	piecenum=body;
}
#endif

#ifdef SUPERDRONE

AimFromWeapon5(piecenum)
{
	piecenum=body;
}

QueryWeapon5(piecenum)
{
	piecenum=sniper;
}

AimWeapon5(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	mainheading=heading;
	turn body to y-axis heading speed AimingSpeed;
	turn snipergun to x-axis pitch speed AimingSpeed;
	return TRUE;
}

AimFromWeapon3(piecenum)
{
	piecenum=missilelauncher0;
}

QueryWeapon3(piecenum)
{
	if (missile==0)
		piecenum=missilelauncher0;
	else if (missile==1)
		piecenum=missilelauncher1;
}

FireWeapon3()
{
	missile=missile+1;
	if (missile>1) missile=0;
}

AimWeapon3(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	//turn body to y-axis heading speed AimingSpeed;
	turn missile0 to x-axis pitch speed AimingSpeed;
	turn missile1 to x-axis pitch speed AimingSpeed;
	return TRUE;
}

AimWeapon4(heading, pitch)
{
	signal SIG_Aim1;
	set-signal-mask SIG_Aim1;
	turn missile2 to y-axis (heading - mainheading) speed <180>;
	turn missile2 to x-axis pitch speed <180>;
	wait-for-turn missile2 around x-axis;
	wait-for-turn missile2 around y-axis;
	return TRUE;
}

AimFromWeapon4(piecenum)
{
	piecenum=missilelauncher2;
}

QueryWeapon4(piecenum)
{
	piecenum=missilelauncher2;
}

AimFromPrimary(piecenum)
{
	piecenum=lasergun0;
}

QueryPrimary(piecenum)
{
	piecenum=laser0;
}

AimPrimary(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	turn lasergun0 to y-axis (heading - mainheading) speed AimingSpeed;
	turn lasergun0 to x-axis pitch speed AimingSpeed;
	return TRUE;
}

AimFromSecondary(piecenum)
{
	piecenum=lasergun1;
}

QuerySecondary(piecenum)
{
	piecenum=laser1;
	
}

AimSecondary(heading, pitch)
{
	signal SIG_Aim1;
	set-signal-mask SIG_Aim1;
	turn lasergun1 to y-axis (heading - mainheading) speed AimingSpeed;
	turn lasergun1 to x-axis pitch speed AimingSpeed;
	return TRUE;
}

#endif