piece base, body, flier0, flier1, wing, thruster0, thruster1;
piece builder, nano0, nano1;
piece laserarms, lasergun0, laser0, lasergun1, laser1;
piece missile0, missile1, missile2, missilelauncher0, missilelauncher1, missilelauncher2;
piece snipergun, sniper;

static-var nanospray, missile, waittime;

#define SMOKEPIECE body
#define AimingSpeed <380>

#define SIG_Aim0 1
#define SIG_Aim1 2
#define SIG_Aim2 4
#define SIG_Build 8

#include "SFXtype.h"
#include "smokeunit.h"
#include "exptype.h"

#define LASER foo

Create()
{
	//not a laser drone?
	//hide laserarms;
	//hide lasergun0;
	//hide lasergun1;
	
	//not a builder drone?
	hide builder;
	
	//not a missile drone?
	hide missile0;
	hide missile1;
	hide missile2;
	
	//not a sniper drone?
	hide snipergun;
	
	start-script SmokeUnit();
}

Killed(severity, corpsetype)
{
	explode thruster0 type FALL | BITMAP3 | FIRE | SMOKE;
	explode thruster1 type FALL | BITMAP5 | FIRE | SMOKE;
	explode flier0 type FALL | BITMAP3 | FIRE | SMOKE;
	explode flier1 type FALL | BITMAP1 | FIRE | SMOKE;
	explode wing type FALL | BITMAP4 | FIRE | SMOKE;

	//laser
	explode lasergun0 type FALL | BITMAP3 | FIRE | SMOKE;
	explode lasergun1 type FALL | BITMAP2 | FIRE | SMOKE;
	explode laserarms type FALL | BITMAP3 | FIRE | SMOKE;

	//builder
	explode builder type FALL | BITMAP2 | FIRE | SMOKE;

	//missile
	explode missile0 type FALL | BITMAP2 | FIRE | SMOKE;
	explode missile1 type FALL | BITMAPNUKE | FIRE | SMOKE;
	explode missile2 type FALL | BITMAP5 | FIRE | SMOKE;

	//sniper
	explode snipergun type SHATTER | BITMAPNUKE | FIRE | SMOKE;
	corpsetype=1;
	
	if (severity > 50)
	{
		corpsetype=3;
		explode body type SHATTER | BITMAP4;
	}
}


// begin laser drone specific stuff

#ifdef LASER

AimFromPrimary(piecenum)
{
	piecenum=lasergun0;
}

QueryPrimary(piecenum)
{
	piecenum=laser0;
}

AimPrimary(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	turn lasergun0 to y-axis heading speed AimingSpeed;
	turn lasergun0 to x-axis pitch speed AimingSpeed;
	return TRUE;
}

AimFromSecondary(piecenum)
{
	piecenum=lasergun1;
}

QuerySecondary(piecenum)
{
	piecenum=laser1;
	
}

AimSecondary(heading, pitch)
{
	signal SIG_Aim1;
	set-signal-mask SIG_Aim1;
	turn lasergun1 to y-axis heading speed AimingSpeed;
	turn lasergun1 to x-axis pitch speed AimingSpeed;
	return TRUE;
}
#endif
// end laser drone specific stuff

//begin builder drone specifics

#ifdef BUILDER
StartBuilding(heading, pitch)
{
	signal SIG_Build;
	set-signal-mask SIG_Build;
	turn base to y-axis heading speed AimingSpeed;
	set INBUILDSTANCE to TRUE;
}

StopBuilding()
{
	turn base to y-axis <0> speed AimingSpeed;
	set INBUILDSTANCE to FALSE;
}

QueryNanoPiece(piecenum)
{
	if (nanospray==0)
	{
		piecenum=nano0;
		nanospray=1;
	}
	else if (nanospray==1)
	{
		piecenum=nano1;
		nanospray=0;
	}
}
#endif

//end builder drone

//begin missile drone

#ifdef MISSILES
AimFromPrimary(piecenum)
{
	piecenum=body;
}

QueryPrimary(piecenum)
{
	if (missile==0)
		piecenum=missilelauncher0;
	else if (missile==1)
		piecenum=missilelauncher1;
	else if (missile==2)
		piecenum=missilelauncher2;
}

FirePrimary()
{
	missile=missile+1;
	if (missile>2) missile=0;
}

AimPrimary(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	turn body to y-axis heading speed AimingSpeed;
	turn missilelauncher0 to x-axis pitch speed AimingSpeed;
	turn missilelauncher1 to x-axis pitch speed AimingSpeed;
	turn missilelauncher2 to x-axis pitch speed AimingSpeed;
	return TRUE;
}
#endif
//sniper drone
#ifdef SNIPER
AimFromPrimary(piecenum)
{
	piecenum=body;
}

QueryPrimary(piecenum)
{
	piecenum=sniper;
}

FirePrimary()
{
	for (missile=0; missile<10; missile=missile+1)
		explode sniper type FIRE | SMOKE;
}

AimPrimary(heading, pitch)
{
	signal SIG_Aim0;
	set-signal-mask SIG_Aim0;
	turn body to y-axis heading speed AimingSpeed;
	turn snipergun to x-axis pitch speed AimingSpeed;
	return TRUE;
}
#endif